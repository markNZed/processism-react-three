WDS_SOCKET_PORT=0 only in CodeSpace ?
The AnimationMixer in Three.js provides a robust and flexible way to handle animations
Entity-Component-System (ECS) is an architectural pattern often used in game development. Entity: A unique identifier representing an object. Component: Holds data attributes for an entity (e.g., position, velocity). System: Contains logic to process entities with specific components (e.g., movement, rendering).

Example of calling a Physics function through animation controller:
[1, 'emergent1.Sphere1', { action: { name: 'applyImpulse', params: [{ x: 10, y: 5, z: 0 }] } }],

Below a certain scale joints could become fixed and merge into a single collider (capsule) the intermediate joints can be ignored
Why can joints have large gaps appear due to forces

The entities form a new internal boundary as well as an external boundary. The internal boundary if "sheltered" from direct external influecne

Top-down -> outside-in
Bottom-up -> inside-out

https://blog.maximeheckel.com/posts/the-magical-world-of-particles-with-react-three-fiber-and-shaders/

Process produce material change e.g a document materializes a history of process.

A relation is in one direction - in many cases there are two relations between two entities
Before an entity can establish a relation there must be an interaction that enables the possibility
Prior to each relation being established there is a history that establishes the "potential relation"

Process can give rise to new entities

Migration - randomly choose the destination, like relations. Detach inward or outward.

Introducing the concept of "meta" - attending to the dynamics of the system while interacting with it. Process can be seen as an abstraction in time. Essentialism tends to function in an all encompassing now. Concepts of meta (as emergent level? as self-referencing ?) and perspective

Need to be able to slow down the simulation, easily, to see what is going on with migration etc. Add a speed config.

Process = sequence of relations that repeat (locally, abstractly, metaphorically..)

Entities that transit other entities e.g. allowing for material causation

Emergent substrate - processing particles to form entities in another dimension e.g. processor constructs objects/relations. Particle can traverse the "plane" and form objects - no it is the plan that traverses the particles back-and-forth. A bit like Turing machine. Stream of particles could generate objects. Impredicative if the planes are arranged into a loop - this could be end-to-end trained ? Can inset LLM and fine-tune

Maybe the storeEntity will need a lock so we can perform transactions.

Could vary the rigidity of joints to get more organic forms at last CompoundEntity

Particle detaching is probably broken
Attractor broken?

Use opacity for blobs 

Next major step is to "grow" the structure instead of using a static layout. useStoreEntity to control the entities dynamically.
