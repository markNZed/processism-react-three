A particle could go through 1st plane, through 2nd plane, loop back through 1st plane and modify structure of second plane. This is cpef. clef is where the 2nd plane modifies the 1st plane.

Spent $350 as of 4/8/2024

Instead of entities it may be better to refer to communities (as per Whitehead)

WDS_SOCKET_PORT=0 only in CodeSpace ?
The AnimationMixer in Three.js provides a robust and flexible way to handle animations
Entity-Component-System (ECS) is an architectural pattern often used in game development. Entity: A unique identifier representing an object. Component: Holds data attributes for an entity (e.g., position, velocity). System: Contains logic to process entities with specific components (e.g., movement, rendering).

Example of calling a Physics function through animation controller:
[1, 'emergent1.Sphere1', { action: { name: 'applyImpulse', params: [{ x: 10, y: 5, z: 0 }] } }],

Below a certain scale joints could become fixed and merge into a single collider (capsule) the intermediate joints can be ignored
Why can joints have large gaps appear due to forces

The entities form a new internal boundary as well as an external boundary. The internal boundary if "sheltered" from direct external influecne

Top-down -> outside-in
Bottom-up -> inside-out

https://blog.maximeheckel.com/posts/the-magical-world-of-particles-with-react-three-fiber-and-shaders/

Process produce material change e.g a document materializes a history of process.

A relation is in one direction - in many cases there are two relations between two entities
Before an entity can establish a relation there must be an interaction that enables the possibility
Prior to each relation being established there is a history that establishes the "potential relation"

Process can give rise to new entities

Migration - randomly choose the destination, like relations. Detach inward or outward.

Introducing the concept of "meta" - attending to the dynamics of the system while interacting with it. Process can be seen as an abstraction in time. Essentialism tends to function in an all encompassing now. Concepts of meta (as emergent level? as self-referencing ?) and perspective

Need to be able to slow down the simulation, easily, to see what is going on with migration etc. Add a speed config.

Process = sequence of relations that repeat (locally, abstractly, metaphorically..)

Entities that transit other entities e.g. allowing for material causation

Emergent substrate - processing particles to form entities in another dimension e.g. processor constructs objects/relations. Particle can traverse the "plane" and form objects - no it is the plan that traverses the particles back-and-forth. A bit like Turing machine. Stream of particles could generate objects. Impredicative if the planes are arranged into a loop - this could be end-to-end trained ? Can inset LLM and fine-tune

Maybe the storeEntity will need a lock so we can perform transactions.

Could vary the rigidity of joints to get more organic forms at last CompoundEntity

Particle detaching is probably broken
Attractor broken?

Use opacity for blobs 

Next major step is to "grow" the structure instead of using a static layout. useStoreEntity to control the entities dynamically.

Currently CompoundEntity calculates the position of the entities via generateEntityPositions using the entityRadius. If it were to grow then it needs to decide where to place the new entity. We can modify the joint to "create" space for the new entity. Deal with special cases of 1,2, 3 entities anf from there is should be a general pattern (e.g. randomly select a child with only 2 joints and add new entity on random side after expanding joint). Perhaps need to use Particle until all the children are created then transform into CompoundEntity to "grow" next level.

Maybe stop scaling particle impulse with area ?

As a blob expands we could hide the relations that were going to/from it

It will not get past init because it is waiting for all particles to be initialised. Maybe don't init in Complexity?

Could automate lastCompoundEntity in storeEntity

Physics debug could be config option

isParticle could maintain a particle array rather than using isParticle

CompoundEntity -> EntityCompound

Because CompoundEntity can become Particle we do not know when we have the full tree ready.

Each CompoundEntity is also a particle. When the particle becomes a CompoundEntity the parent holds the first particle.  The joint remains particle.

chainRef should be a distinct entry ?

CompoundEntity -> Node or Entity or Accumulaton (could be an accumulation of 1)

Joint should probably store [id1, id2, ref]

Creating a node for each particle creates dealys for th emounting of the React components, so we do not mount the lowest level as a CompoundEntity.

Eventually a CompoundEntity could become a Particle or vice-verca. In this case we would need to copy the properties ?

useAnimateComplexity to start with [9] then move to [9,9] etc Could move the particle down or maybe just the joints. useAnimateComplexity would operate on storeEntity. use it from complexity, wait until Particles are present and then x seconds.

If CompoundEntities are of different sizes then the outer algorithm will break.

Instead of setCurrentScene, setReloadScene, setUsePhysics, setPausePhysics
const setOption = useStore((state) => state.setOption);
const getOption = useStore((state) => state.getOption);

const entityNode = directGetNode(entitiesInstantiated[i]);
// Create a quaternion representing a small rotation
const quaternion = new THREE.Quaternion();
const axis = new THREE.Vector3(0, 0, 1); // Rotate around the Z axis
const angle = THREE.MathUtils.degToRad(rotation); // Rotate by degrees
quaternion.setFromAxisAngle(axis, angle);
entityNode.ref.current.current.lockRotations(false, true);
entityNode.ref.current.current.setRotation(quaternion, true);
entityNode.ref.current.current.lockRotations(true, true);

A ref that causes a rerender:
const [ref, setRef] = useState(null);

useEffect(() => {
  if (ref) {
    // do the thing
  }
}, [ref]);

<RigidBody ref={setRef}>